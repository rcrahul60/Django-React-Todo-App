{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","refreshList","console","log","axios","get","then","res","setState","todoList","data","catch","err","handleSubmit","event","task","preventDefault","state","activeItem","id","post","response","title","completed","error","handleEdit","editing","handleDelete","delete","handleChange","bind","this","value","target","prevState","className","onSubmit","style","flex","type","name","placeholder","onChange","map","index","key","created_at","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d512f652.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n//import Modal from \"./components/Modal\";\nimport axios from \"axios\";\n//import CustomForm from \"./components/Form\"\nimport './App.css';\n\nclass App extends React.Component{\nconstructor(props){ \n  super(props);\n  this.state = {\n    todoList: [],\n    activeItem:{\n      \n      title:'',\n      completed:false,\n    },\n    editing:false,\n  }\n // this.refreshList= this.refreshList.bind(this)\n  this.handleChange = this.handleChange.bind(this)\n  this.handleSubmit = this.handleSubmit.bind(this)\n  this.handleDelete = this.handleDelete.bind(this)\n  this.handleEdit = this.handleEdit.bind(this)\n};\n\ncomponentDidMount(){\n  //console.log('this working');\n  this.refreshList();\n}\nrefreshList = () => {\n  console.log('reached here')\n  axios\n  .get(\"http://localhost:8000/api/task-list/\")\n  .then(res => this.setState({todoList:res.data}))\n  .catch(err => console.log(err));\n};\nhandleChange(event){\n  //var name = event.target.name\n  var value = event.target.value\n  \n\n    this.setState(prevState => ({activeItem: {...prevState.activeItem, title: value, completed: false }}));\n\n    \n}\nhandleSubmit = (event, task) =>{\n  event.preventDefault();\n  console.log(this.state.activeItem)\nif(task.id){\n  axios\n  .post(`http://localhost:8000/api/task-update/${task.id}/`,task)\n  .then(response => {\n    this.refreshList();\n    this.setState({activeItem: {title:'',\n    completed:false,}})\n  })\n  .catch(error => {\n    console.log(error)\n  })\n  return;\n}\naxios\n.post(\"http://localhost:8000/api/task-create/\",this.state.activeItem)\n.then(response =>this.refreshList())\n.catch(error =>{\n  console.log(error)\n});\n};\n\nhandleEdit= task =>{\n  //console.log(task, 'edit');\n  this.setState({\n    activeItem: task,\n    editing: true\n  })\n}\n\nhandleDelete = task =>{\n  axios\n  .delete(`http://localhost:8000/api/task-delete/${task.id}/`)\n  .then(response => this.refreshList())\n  .catch(error => {\n    console.log(error)\n  })\n};\n\n  render(){\n    var task = this.state.todoList;\n    return (\n      <div className=\"container\">\n          <div id='task-container'>\n\n    <div id=\"form-wrapper\">\n      <form onSubmit={(event) => this.handleSubmit(event, this.state.activeItem)} id=\"form\">\n        <div className=\"flex-wrapper\">\n                  <div style={{ flex: 6 }}>\n  <input className=\"form-control\" type=\"text\" id=\"title\" value={this.state.activeItem.title} name=\"title\" placeholder=\"add task ...\" onChange={this.handleChange} />\n  </div>          \n  <div style={{ flex: 2 }}>\n  <button className=\"btn btn-warning\" name=\"submit\" id=\"submit\">Add Task</button>\n  </div>\n  </div>\n</form>\n\n    </div>\n\n    <div id=\"list-wrapper\">\n{task.map((task,index) => {\n  return(\n    <div key={index} className=\"task-wrapper flex-wrapper\">\n      <div style={{ flex:6}}>\n        <span>{task.title}</span>\n      </div>\n      <div style={{flex:2}}>\n        <span>{task.created_at}</span>\n      </div>\n      <div style={{ flex:2}}>\n        <button className=\"btn btn-sm btn-outline-info delete\" onClick = { () => this.handleEdit(task) }>Edit</button>\n      </div>\n      <div style={{flex:1}}>\n        <button className=\"btn btn-sm btn-outline-dark delete\" onClick={() => this.handleDelete(task)}>Delete</button>\n      </div>\n\n      </div>\n  )\n})}\n    </div>\n  </div>\n\n\n        </div>\n    )\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}